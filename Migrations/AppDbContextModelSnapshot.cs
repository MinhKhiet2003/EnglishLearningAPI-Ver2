// <auto-generated />
using System;
using EnglishLearningAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnglishLearningAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnglishLearningAPI.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("course_name");

                    b.Property<string>("CourseTarget")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("course_target");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("course");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.CourseProgress", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("progress_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("completed_at");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("IsCompleted")
                        .HasColumnType("int")
                        .HasColumnName("is_completed");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("course_progress");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.FormSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("submission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("FormType")
                        .HasColumnType("int")
                        .HasColumnName("form_type");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("form_submission");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("topic_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("topic_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("topic");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.TopicProgress", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("progress_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("completed_at");

                    b.Property<int>("IsCompleted")
                        .HasColumnType("int")
                        .HasColumnName("is_completed");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int")
                        .HasColumnName("topic_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("topic_progress");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit")
                        .HasColumnName("paid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Salt");

                    b.Property<DateTime?>("SubscriptionEndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("subscription_end_date");

                    b.Property<string>("SubscriptionPlan")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("subscription_plan");

                    b.Property<DateTime?>("SubscriptionStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("subscription_start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.UserProgress", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("progress_id");

                    b.Property<DateTime?>("LastReviewed")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_reviewed");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("proficiency_level");

                    b.Property<DateTime?>("NextReview")
                        .HasColumnType("datetime2")
                        .HasColumnName("next_review");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int?>("VocabularyId")
                        .HasColumnType("int")
                        .HasColumnName("vocab_id");

                    b.HasKey("Id");

                    b.HasIndex("VocabularyId");

                    b.ToTable("user_progress");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.Vocabulary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vocab_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Audio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("audio");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("ExampleSentence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("example_sentence");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("meaning");

                    b.Property<string>("Pronunciation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pronunciation");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int")
                        .HasColumnName("topic_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("word");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("vocabulary");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.CourseProgress", b =>
                {
                    b.HasOne("EnglishLearningAPI.Models.Course", "Course")
                        .WithMany("CourseProgresses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnglishLearningAPI.Models.User", "User")
                        .WithMany("CourseProgresses")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.FormSubmission", b =>
                {
                    b.HasOne("EnglishLearningAPI.Models.User", "User")
                        .WithMany("FormSubmissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.Payment", b =>
                {
                    b.HasOne("EnglishLearningAPI.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.Topic", b =>
                {
                    b.HasOne("EnglishLearningAPI.Models.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.TopicProgress", b =>
                {
                    b.HasOne("EnglishLearningAPI.Models.User", "User")
                        .WithMany("TopicProgresses")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnglishLearningAPI.Models.Topic", "Topic")
                        .WithMany("TopicProgresses")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.UserProgress", b =>
                {
                    b.HasOne("EnglishLearningAPI.Models.User", "User")
                        .WithMany("UserProgresses")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnglishLearningAPI.Models.Vocabulary", "Vocabulary")
                        .WithMany("UserProgresses")
                        .HasForeignKey("VocabularyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");

                    b.Navigation("Vocabulary");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.Vocabulary", b =>
                {
                    b.HasOne("EnglishLearningAPI.Models.Topic", "Topic")
                        .WithMany("Vocabularies")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.Course", b =>
                {
                    b.Navigation("CourseProgresses");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.Topic", b =>
                {
                    b.Navigation("TopicProgresses");

                    b.Navigation("Vocabularies");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.User", b =>
                {
                    b.Navigation("CourseProgresses");

                    b.Navigation("FormSubmissions");

                    b.Navigation("Payments");

                    b.Navigation("TopicProgresses");

                    b.Navigation("UserProgresses");
                });

            modelBuilder.Entity("EnglishLearningAPI.Models.Vocabulary", b =>
                {
                    b.Navigation("UserProgresses");
                });
#pragma warning restore 612, 618
        }
    }
}
